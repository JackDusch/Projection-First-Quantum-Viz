#version 430
layout (local_size_x=8, local_size_y=8) in;

layout(rg16f, binding=0) writeonly uniform image2D imgI;
layout(rg16f, binding=1) writeonly uniform image2D img_dYaw;
layout(rg16f, binding=2) writeonly uniform image2D img_dDolly;

uniform sampler3D uPsi3D;
uniform bool uUsePsi3D;

uniform ivec2 uOutSize;

layout(std140, binding=0) uniform Params {
    mat3 R;
    vec3 tc;
    float fov;
    int   lensType;   // 0=perspective, 1=hemi, 2=equirect
    float eps;
    float time;
    vec2  invOutSize;
} P;

vec2 cmul(vec2 a, vec2 b){ return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x); }

mat3 rotZ(float a){ float c=cos(a), s=sin(a); return mat3(c,-s,0, s,c,0, 0,0,1); }

float hitUnitSphere(vec3 tc, vec3 d){
    float b = dot(tc, d);
    float c = dot(tc, tc) - 1.0;
    float disc = b*b - c;
    if (disc < 0.0) return -1.0;
    float s = -b - sqrt(disc);
    if (s < 0.0) s = -b + sqrt(disc);
    return s >= 0.0 ? s : -1.0;
}

vec2 psiAnalytic(vec3 x, float t){
    float PI = 3.141592653589793;
    float r = length(x);
    float theta = acos(clamp(x.z / max(r,1e-9), -1.0, 1.0));
    float phi = atan(x.y, x.x); if (phi < 0.0) phi += 2.0*PI;
    // simple ℓ≤1 combo
    float Y00 = 0.5*sqrt(1.0/PI);
    float Y10 = sqrt(3.0/(4.0*PI)) * cos(theta);
    float Y11c = -sqrt(3.0/(8.0*PI)) * sin(theta) * cos(phi);
    float Y11s = -sqrt(3.0/(8.0*PI)) * sin(theta) * sin(phi);
    float w0=1.0, w1=0.7, w2=0.6;
    float E0=1.0, E1=1.6, E2=2.3;
    vec2 e0 = vec2(cos(-E0*t), sin(-E0*t));
    vec2 e1 = vec2(cos(-E1*t), sin(-E1*t));
    vec2 e2 = vec2(cos(-E2*t), sin(-E2*t));
    vec2 y11 = vec2(Y11c, Y11s);
    vec2 outv = e0*(w0*Y00) + e1*(w1*Y10) + cmul(e2, w2*y11);
    return outv;
}

vec2 samplePsi(vec3 x, float t){
    if (uUsePsi3D){
        vec3 uvw = 0.5*(x+1.0);
        vec2 z = texture(uPsi3D, uvw).rg;
        return (z - 0.5) * 2.0;
    } else {
        float r = length(x);
        if (r < 1.0001) return psiAnalytic(normalize(x), t);
        return vec2(0.0);
    }
}

vec2 renderAtParams(vec2 fragIdx, mat3 R, vec3 tc){
    vec2 uv = (fragIdx + 0.5) * P.invOutSize;
    if (P.lensType == 0){
        float s = tan(0.5 * P.fov);
        vec3 d_cam = normalize(vec3((2.0*uv.x-1.0)*s, (2.0*uv.y-1.0)*s, 1.0));
        vec3 d = normalize(R * d_cam);
        float tHit = hitUnitSphere(tc, d);
        if (tHit < 0.0) return vec2(0.0);
        vec3 x = tc + tHit * d;
        return samplePsi(x, P.time);
    } else if (P.lensType == 1){
        vec2 c = vec2(0.5);
        vec2 q = uv - c;
        float Rpix = 0.5;
        float r = length(q);
        if (r > Rpix) return vec2(0.0);
        float PI = 3.141592653589793;
        float theta = (PI * 0.5) * (r / Rpix);
        float phi   = atan(q.y, q.x); if (phi < 0.0) phi += 2.0*PI;
        vec3 d_cam = vec3(cos(phi)*sin(theta), sin(phi)*sin(theta), cos(theta));
        vec3 d = normalize(R * d_cam);
        float tHit = hitUnitSphere(tc, d);
        if (tHit < 0.0) return vec2(0.0);
        vec3 x = tc + tHit * d;
        return samplePsi(x, P.time);
    } else {
        float PI = 3.141592653589793;
        float theta = uv.y * (0.5 * PI);
        float phi   = uv.x * (2.0 * PI);
        vec3 d_cam = vec3(cos(phi)*sin(theta), sin(phi)*sin(theta), cos(theta));
        vec3 d = normalize(R * d_cam);
        float tHit = hitUnitSphere(tc, d);
        if (tHit < 0.0) return vec2(0.0);
        vec3 x = tc + tHit * d;
        return samplePsi(x, P.time);
    }
}

void main(){
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(gid, uOutSize))) return;

    vec2 I0 = renderAtParams(vec2(gid), P.R, P.tc);

    mat3 R_yaw_p = rotZ(+P.eps) * P.R;
    mat3 R_yaw_m = rotZ(-P.eps) * P.R;
    vec2 I_yaw_p = renderAtParams(vec2(gid), R_yaw_p, P.tc);
    vec2 I_yaw_m = renderAtParams(vec2(gid), R_yaw_m, P.tc);
    vec2 dYaw = (I_yaw_p - I_yaw_m) / (2.0*P.eps);

    vec3 fwd = P.R * vec3(0,0,1);
    vec2 I_dolly_p = renderAtParams(vec2(gid), P.R, P.tc + P.eps * fwd);
    vec2 I_dolly_m = renderAtParams(vec2(gid), P.R, P.tc - P.eps * fwd);
    vec2 dDolly = (I_dolly_p - I_dolly_m) / (2.0*P.eps);

    imageStore(imgI,      gid, vec4(I0, 0.0, 1.0));
    imageStore(img_dYaw,  gid, vec4(dYaw, 0.0, 1.0));
    imageStore(img_dDolly,gid, vec4(dDolly, 0.0, 1.0));
}
